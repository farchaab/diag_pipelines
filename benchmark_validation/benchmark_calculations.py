# -*- coding: UTF-8 -*-
"""
Author : benchmark_calculations <petros.liakopoulos@chuv.ch>
Date   : 2022-03-28
Purpose: benchmark new predictions to ref data
"""

import argparse
import pandas as pd
import os
from typing import NamedTuple
import pdfkit
from string import Template





class Args(NamedTuple):
    """ Command-line arguments """
    pipeline_TSV: str
    out: str
    pre: str

# --------------------------------------------------
def get_args() -> Args:
    """ Get command-line arguments """

    parser = argparse.ArgumentParser(
        description='Compare tsv of new pipeline to reference data and older pipeline',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('pipeline_tsv',
                        metavar='tsv file',
                        help='The output TSV file of the new pipeline')

    parser.add_argument('-p',
                        '--pre',
                        metavar='tsv file',
                        type=str,
                        help='The output TSV file of previous pipeline to compare to',
                        default='diag_pipelines_2.6.0/combined_detail_NR_2.6.tsv')

    parser.add_argument('-o',
                        '--out',
                        metavar='dir',
                        help="output directory",
                        type=str,
                        default='')



    args = parser.parse_args()

    if not os.path.isfile(args.pipeline_tsv):
        parser.error("File does not exist")

    if not os.path.isfile(args.pre):
        parser.error("File does not exist")


    if args.out != "":
        if not os.path.exists(args.out):
            parser.error("Output path does not exist")





    return Args(args.pipeline_tsv, args.out, args.pre)

def main() -> None:
    """ Make a jazz noise here """
    #parse command line arguments and read reference tables
    args = get_args()
    ref_table_neg = pd.read_csv("reference_table_gramneg.tsv", sep='\t', header=0)
    ref_table_pos = pd.read_csv("reference_table_grampos.tsv", sep='\t', header=0)

    #read parsed tsv file with gene prediction and split into gram positive and negative
    df = pd.read_csv(args.pipeline_TSV, sep='\t', header=0)
    df_tuple = split_df_by_gram(df)
    df_gramneg = df_tuple[0]
    df_grampos = df_tuple[1]

    #read previous pipeline iteration TSV file
    diag_2_6 = phenotype_microarray_spec_sens(ref_table_neg, pd.read_csv(args.pre, sep='\t', header=0))

    #calculate sensitivity and specificity scores from gram positive and negative
    gramneg = phenotype_microarray_spec_sens(ref_table_neg, df_gramneg)
    grampos = gram_pos_sens_spec(df=df_grampos, ref=ref_table_pos)


    Template_string = """<!DOCTYPE html>
    <html>
    <head>
    <style>
    table, th, td {
      border: 1px solid black;
    }

    table {
      width: 100%;
    }
    </style>
    </head>
    <body>
    <h1><strong>Pipeline benchmark report</strong></h1>
       <br></br>
       <br>This report was generated by the 'benchmark_calculations.py' script.
       <br>A summary table of the raw data is available under the name 'reference_table.tsv'
       <br>For further information on the data and how percentages were calculated, take a look at the README file
       <br>The sensitivity and specificity were calculated using the data from the following paper: 
       <br>https://www.sciencedirect.com/science/article/pii/S1198743X15600660?via%3Dihub
       </p>
       <br></br>
    <h2>Sample information (Gram Negative)</h2>
        <table align="center">
            <tr>
                <th>Total samples</th>
                <th>Carbapenem resistant samples (MIC Eucast)</th>
                <th>Carbapenem susceptible samples (MIC Eucast)</th>
            </tr>
            <tr>
                <td style="text-align: center; vertical-align: middle;"> $tot </td>
                <td style="text-align: center; vertical-align: middle;"> $pos </td>
                <td style="text-align: center; vertical-align: middle;"> $neg </td>
        </table>
    <h2>Phenotype(MIC) Sensitivity and Specificity</h2>
    <table>
      <tr>
        <th>Diag Pipelines 2.6.0</th>
        <th>New Pipeline</th>
      </tr>
      <tr>
        <td>Sensitivity: $sens1 %</td>
        <td>Sensitivity: $sens2 %</td>
      </tr>
      <tr>
        <td>Specificity: $spec1 %</td>
        <td>Specificity: $spec2 %</td>
      </tr>
    </table>

    <h2>Microarray Sensitivity</h2>

    <table>
      <tr>
        <th>Diag Pipelines 2.6.0</th>
        <th>New Pipeline</th>
      </tr>
      <tr>
        <td>Sensitivity: $sensma1 %</td>
        <td>Sensitivity: $sensma2 %</td>
      </tr>
    </table>
    
    <h2>Sample information (Gram Positive)</h2>
    
    <table align="center">
      <tr>
        <th>Total samples</th>
        <th>Vancomycin or Methicilin resistant samples (PCR confirmed)</th>
      </tr>
      <tr>
        <td style="text-align: center; vertical-align: middle;"> $tot2 </td>
        <td style="text-align: center; vertical-align: middle;"> $postot </td>

    </table>
    
    <h2>PCR Sensitivity and Specificity for vanA and mecA genes</h2>

    <table>
      <tr>
        <th>Diag Pipelines 2.6.0</th>
        <th>New Pipeline</th>
      </tr>
      <tr>
        <td>Sensitivity: $senstot %</td>
        <td>Specficity: $spectot %</td>
      </tr>
    </table>
    
    </body>
    </html>
     """

    HTML_TEMPLATE1 = """
    <html>
    <head>
    <style>
      h2 {
        text-align: center;
        font-family: Helvetica, Arial, sans-serif;
      }
      table { 
        margin-left: auto;
        margin-right: auto;
      }
      table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
      }
      th, td {
        padding: 5px;
        text-align: center;
        font-family: Helvetica, Arial, sans-serif;
        font-size: 90%;
      }
      table tbody tr:hover {
        background-color: #dddddd;
      }
      .wide {
        width: 90%; 
      }
    </style>
    </head>
    <body>
    """

    HTML_TEMPLATE2 = """
    </body>
    </html>
    """
    #format and export HTML
    formatted_html = Template(Template_string).substitute(tot = diag_2_6[3], pos = diag_2_6[4], neg = diag_2_6[3] - diag_2_6[4], sens1=diag_2_6[0], sens2 = gramneg[0],
                                                          spec1= diag_2_6[1], spec2=gramneg[1], sensma1 = diag_2_6[2], sensma2 = gramneg[2], tot2 = grampos[2], postot = grampos[3],
                                                          senstot = grampos[0], spectot = grampos[1])

    pdfkit.from_string(formatted_html, output_path="pipeline_benchmark_summary.pdf")


    table = create_sum_table(pd.read_csv("diag_pipelines_2.6.0/combined_detail_NR_2.6.tsv", sep='\t', header=0), df)


    to_html_pretty(table, HTML_TEMPLATE1, HTML_TEMPLATE2, "pipeline_comparison.html", 'Gene prediction differences in pipelines report')




# --------------------------------------------------

def phenotype_microarray_spec_sens(ref, df) -> tuple:
    """compares input tsv from diag pipelines to reference data"""
    carbapenem_genes = ("OXA", "VIM", "NDM", "CTX", "SHV", "KPC", "ACT", "ADC", "CMH", "VEB", "PAL")
    samples = tuple(ref["Strain_ID"])
    pheno_tp, pheno_fp, pheno_fn, pheno_tn= 0, 0, 0, 0
    micro_tp= 0

    for sample in samples:
        phenotype = ref[ref['Strain_ID'] == sample].iloc[0,12]
        microarray = ref[ref['Strain_ID'] == sample].iloc[0,3].split(", ")
        subset_df = df[df["Sample"] == sample]
        carba_genes_found = 0
        #check carbapenemase genes detected
        for gene in carbapenem_genes:
            if any(gene in pred for pred in list(subset_df["Best_hit"])):
                carba_genes_found += 1
        if carba_genes_found != 0 and phenotype == "POS":
            pheno_tp += 1
        elif carba_genes_found == 0 and phenotype == "NEG":
            pheno_tn += 1
        elif carba_genes_found != 0 and phenotype == "NEG":
            pheno_fp += 1
        else:
            pheno_fn += 1
        #check if all gene fams detected by micrarray are present
        for gene_fam in microarray:
            if any(gene_fam in pred for pred in list(subset_df["Best_hit"])):
                micro_tp += 1

    return (round((pheno_tp/(pheno_tp+pheno_fn))*100), round((pheno_tn/(pheno_tn+pheno_fp))*100), round((micro_tp/33)*100), len(samples), pheno_tp+pheno_fn)

# --------------------------------------------------

def create_sum_table(df1 , df2):
    """compares to tsv files outputed from diag pipelines and returns summary table of differences"""
    sample_names = sorted([x for x in list(set(list(df1.iloc[:, 0])))]) #extract sample names and rank by alphabetical order
    preds_ref, preds_new = [], [] #lists for storing the differences in predictions for the two pipelines
    for sample in sample_names:
        subset_df1 = df1.loc[df1["Sample"] == sample]#subsetting the two df by the name of the sample
        subset_df2 = df2.loc[df2["Sample"] == sample]
        predicted_in_ref = list(set(list(subset_df1["Best_hit"])) - set(list(subset_df2["Best_hit"])))#extracting what genes were predicted in ref pipeline vs new
        predicted_in_new = list(set(list(subset_df2["Best_hit"])) - set(list(subset_df1["Best_hit"])))#extracting what genes were predicted in new pipeline vs ref
        lst_pred_ref, lst_pred_new, formated_preds_ref, formated_preds_new= [], [], [], []

        if predicted_in_ref != []:
            for pred in predicted_in_ref: #for each predicted gene, go back to the subsetted df and extract perc id and coverage
                lst_pred_ref.append([pred, subset_df1[subset_df1['Best_hit'] == pred].iloc[0,15], subset_df1[subset_df1['Best_hit'] == pred].iloc[0,16], subset_df1[subset_df1['Best_hit'] == pred].iloc[0,9]])
            for listit in lst_pred_ref: #format each list with gene name, perc id and coverage into one string
                formated_preds_ref.append(f"{listit[0]} (id: {listit[1]}, cov: {listit[2]}, depth: {listit[3]})")
        else:
            formated_preds_ref.append("-")

        if predicted_in_new != []:
            for pred2 in predicted_in_new:#same as above for new pipeline
                lst_pred_new.append([pred2, subset_df2[subset_df2['Best_hit'] == pred2].iloc[0,15], subset_df2[subset_df2['Best_hit'] == pred2].iloc[0,16], subset_df2[subset_df2['Best_hit'] == pred2].iloc[0,9]])
            for listit in lst_pred_new:
                formated_preds_new.append(f"{listit[0]} (id: {listit[1]}, cov: {listit[2]}, depth: {listit[3]})")
        else:
            formated_preds_new.append("-")


        preds_ref.append(formated_preds_ref)
        preds_new.append(formated_preds_new)


    col2 = []
    col3 = []
    for i in range(0, len(sample_names)):
        if preds_ref[i] == preds_new[i]: #if both predictions are the same add check marks
            col2.append("✓")
            col3.append("✓")
        else:
            col2.append(preds_ref[i])
            col3.append(preds_new[i])
    summary_table = pd.DataFrame(
        {"Sample Name": sample_names,
         "Prediction in reference pipeline": col2,
         "Prediction in updated pipeline": col3
         })
    summary_table["Prediction in reference pipeline"] = summary_table["Prediction in reference pipeline"].apply(lambda x: ', '.join(map(str, x))) #format lists within columns
    summary_table["Prediction in updated pipeline"] = summary_table["Prediction in updated pipeline"].apply(lambda x: ', '.join(map(str, x)))

    return summary_table

# --------------------------------------------------
def gram_pos_sens_spec(df, ref):
    """calculates scores for gram positive samples"""
    tp, fp, tn, fn = 0, 0, 0, 0
    samples = tuple(ref["Strain_ID"])

    for sample in samples:
        pcrvanA = ref[ref['Strain_ID'] == sample].iloc[0,1]
        pcrmecA = ref[ref['Strain_ID'] == sample].iloc[0,2]
        subset_df = df[df["Sample"] == sample]
        preds = list(subset_df["Best_hit"])
        #check for vanA gene
        if "vanA" in preds and pcrvanA == "POS":
            tp += 1
        elif "vanA" not in preds and pcrvanA == "POS":
            fp += 1
        elif "vanA" not in preds and pcrvanA == "NEG":
            tn += 1
        else:
            fn += 1
        # check for mecA gene
        if "mecA" in preds and pcrmecA == "POS":
            tp += 1
        elif "mecA" not in preds and pcrmecA == "POS":
            fp += 1
        elif "mecA" not in preds and pcrmecA == "NEG":
            tn += 1
        else:
            fn += 1

    return (round((tp/(tp+fn))*100), round((tn/(tn+fp))*100), len(samples), tp+fn)


# --------------------------------------------------

def to_html_pretty(df, templ1, templ2, filename, title=''):
    '''
    Write an entire dataframe to an HTML file
    with nice formatting.
    Thanks to @stackoverflowuser2010 for the
    pretty printer see https://stackoverflow.com/a/47723330/362951
    '''
    ht = ''
    if title != '':
        ht += '<h2> %s </h2>\n' % title
    ht += df.to_html()

    with open(filename, 'w') as f:
         f.write(templ1 + ht + templ2)

# --------------------------------------------------

def split_df_by_gram(table):
    gram_pos_samples = ["31956-1", "32246-1", "32248-1", "32266-1", "32670-1", "32949-1", "33124-1", "33145-1", "33146-1", "33154-1", "31956-2", "32246-2",
                    "32248-2", "32266-2", "32670-2", "32949-2", "33124-2", "33145-2", "33146-2", "33154-2", "1401020723-1", "1406280727-1", "1412211058-1",
                    "1505151028-1", "1505223187-1", "1506252844-1", "1508042322-1", "1508181008-1", "1608090778-1", "1608090779-1", "1401020723-2",
                    "1406280727-2", "1412211058-2", "1505151028-2", "1505223187-2", "1506252844-2", "1508042322-2", "1508181008-2", "1608090778-2",
                    "1608090779-2"]
    df_gramneg = table[~table["Sample"].isin(gram_pos_samples)]
    df_grampos = table[table["Sample"].isin(gram_pos_samples)]
    return (df_gramneg, df_grampos)


# --------------------------------------------------
if __name__ == '__main__':
    main()